
class Solution:
    def sortList(self, head: ListNode) -> ListNode:
        if not head or not head.next: 
			return head 
        slow, fast = head, head
        while fast and fast.next:
            fast, slow = fast.next.next, slow.next
        mid, slow.next = slow.next, None 
        left, right = self.sortList(head), self.sortList(mid)
        h = res = ListNode(0)
        while left and right:
            if left.val < right.val: h.next, left = left, left.next
            else: h.next, right = right, right.next
            h = h.next
        h.next = left if left else right
        return res.next




*//

class Solution:
    def sortList(self, head: ListNode) -> ListNode:
        if not head or not head.next:
            return head
        self.sort(head, None)
        return head
    
    def sort(self,left,right):
        if left==right or left.next==right:
            return left
        index = self.partition(left,right)
        self.sort(left, index)
        self.sort(index.next,right)
        
    def partition(self,left,right):
        #前后指针法
        value = left.val
        pre = left.next
        cur = left.next
		pre1=left
        while cur!=right:
            if cur.val<value:
                pre.val, cur.val = cur.val, pre.val
				pre1=pre
				pre=pre.next
            cur = cur.next
        pre1.val, left.val = left.val, pre1.val
        return pre1

