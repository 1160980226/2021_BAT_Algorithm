请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径可以从矩阵中的任意一格开始，每一步可以在矩阵中向左、右、上、下移动一格。如果一条路径经过了矩阵的某一格，那么该路径不能再次进入该格子。例如，在下面的3×4的矩阵中包含一条字符串“bfce”的路径（路径中的字母用加粗标出）。

[["a","b","c","e"],
["s","f","c","s"],
["a","d","e","e"]]

但矩阵中不包含字符串“abfb”的路径，因为字符串的第一个字符b占据了矩阵中的第一行第二个格子之后，路径不能再次进入这个格子。

class Solution:
    def exist(self, board: List[List[str]], word: str) -> bool:
        if board is None or len(board) == 0:
            return False
        words = list(word)
        for i in range(len(board)):
            for j in range(len(board[0])):
                if self.dfs(board, words, i, j, 0):
                    return True
        return False

    def dfs(self, board, words, i, j, index):
        if i >= len(board) or i < 0 or j >= len(board[0]) or j < 0 or board[i][j] != words[index]:
            return False
        if index == len(words) - 1:
            return True
        temp = board[i][j]
        board[i][j] = "1"
        if_exist = self.dfs(board, words, i, j - 1, index + 1) or self.dfs(board, words, i, j + 1, index + 1) or self.dfs(board, words, i + 1, j, index + 1) or self.dfs(board, words, i - 1, j, index + 1)
        board[i][j] = temp
        return if_exist
		
		
def exist(self,board,word):
	def dfs(i,j,index):
		if i>=len(board) or i < 0 or j>=len(board[0]) or j<0 or board[i][j] != words[index]:
			return False
		if index==len(words)-1:
			return True
		temp=board[i][j]
		board[i][j]="1"
		if_exist=dfs(i,j-1,index+1) or dfs(i,j+1,index+1) or dfs(i-1,j,index+1) or dfs(i+1,j,index+1) 
		board[i][j]=temp
		return if_exist
	if board is None or len(board) == 0:
		return False
	for i in range(len(board)):
		for j in range(len(board[0])):
			if dfs(i,j,0)
				return True
	return False
	
解题思路：
本问题是典型的矩阵搜索问题，可使用 深度优先搜索（DFS）+ 剪枝 解决。

算法原理：
深度优先搜索： 可以理解为暴力法遍历矩阵中所有字符串可能性。DFS 通过递归，先朝一个方向搜到底，再回溯至上个节点，沿另一个方向搜索，以此类推。
剪枝： 在搜索中，遇到 这条路不可能和目标字符串匹配成功 的情况（例如：此矩阵元素和目标字符不同、此元素已被访问），则应立即返回，称之为 可行性剪枝 。
算法剖析：
递归参数： 当前元素在矩阵 board 中的行列索引 i 和 j ，当前目标字符在 word 中的索引 k 。
终止条件：
返回 falsefalse ： ① 行或列索引越界 或 ② 当前矩阵元素与目标字符不同 或 ③ 当前矩阵元素已访问过 （③ 可合并至 ② ） 。
返回 truetrue ： 字符串 word 已全部匹配，即 k = len(word) - 1 。
递推工作：
标记当前矩阵元素： 将 board[i][j] 值暂存于变量 tmp ，并修改为字符 '1' ，代表此元素已访问过，防止之后搜索时重复访问。
搜索下一单元格： 朝当前元素的 上、下、左、右 四个方向开启下层递归，使用 或 连接 （代表只需一条可行路径） ，并记录结果至 res 。
还原当前矩阵元素： 将 tmp 暂存值还原至 board[i][j] 元素。
回溯返回值： 返回 res ，代表是否搜索到目标字符串。
图解中，从每个节点 DFS 的顺序为：下、上、右、左。
复杂度分析：
M,N 分别为矩阵行列大小， K 为字符串 word 长度。

时间复杂度 O(K**3*M*N)最差情况下，需要遍历矩阵中长度为 K字符串的所有方案，时间复杂度为 O(K^3)不回头
 )；矩阵中共有MN 个起点，时间复杂度为 O(MN)。
方案数计算： 设字符串长度为 KK ，搜索中每个字符有上、下、左、右四个方向可以选择，舍弃回头（上个字符）的方向，剩下 33 种选择，因此方案数的复杂度为 O(3^K)O(3 
K
 ) 。
空间复杂度 O(K)O(K) ： 搜索过程中的递归深度不超过 KK ，因此系统因函数调用累计使用的栈空间占用 O(K)O(K) （因为函数返回后，系统调用的栈空间会释放）。最坏情况下 K = MNK=MN ，递归深度为 MNMN ，此时系统栈使用 O(MN)O(MN) 的额外空间。



