def trap(nums):
	ans = 0
	m = len(nums)
	for i in range(1,m):
		max_left=0
		max_right=0
		left=i
		right=i
		while left>=0:
			max_left=max(max_left,nums[left])
			left -=1
		while right<m:
			max_right=max(max_right,nums[right])
			right +=1
		ans += min(max_left,max_right)-nums[i]
	return ans
	
def trap(nums):
	ans = 0
	m = len(nums)
	left = [0]*m
	right = [0]*m
	left[0]=nums[0]	
	for i in range(1,m):
		left[i] = max(left[i-1],nums[i])
	right[m-1]=nums[m-1]
	for j in range(m-2,-1,-1):
		right[j]=max(right[j+1],nums[j])
	for k in range(1,m):
		ans += min(left[k],right[k])-nums[k]
	return ans 
	
	
	
	
def trap(nums):
	ans = 0
	for i in range(1,len(nums)):
		ans += min(max(nums[:i+1]),max(nums[i:]))-nums[i]
	return ans
	
	
	
	
	
	
"双指针"
def trap(nums):
	ans = 0
	left_max=0
	right_max=0
	left=0
	right=len(nums)-1
	while left < right:
		if nums[left]<nums[right]:
			left_max = max(left_max,nums[left])
			ans += left_max-nums[left]
			left +=1
		else:
			right_max = max(right_max,nums[right])
			ans += right_max-nums[right]
			right -=1
	return ans
	
	