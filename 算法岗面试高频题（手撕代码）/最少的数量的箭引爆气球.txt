class Solution: // 按照end排序
    def findMinArrowShots(self, points: List[List[int]]) -> int:
        if points == []:
            return 0
        points.sort(key = lambda x:x[1])
        end = points[0][1]
        arrow = 1
        
        for i in points[1:]:
            next_start = i[0]
            if next_start > end:
                arrow += 1
                end = i[1]   # 记得更新end

        return arrow


class Solution:
	def findMinArrowShots(self,points):
		if points == []:
			return 0
		points.sort(key=lambda x:x[1])
		end = points[0][1]
		arrow=1
		for i in points[1:]:
			next_start=i[0]
			if next_start>end:
				arrow +=1
				end=i[1]
		return arrow
		
		
		
		
class Solution:
    def findMinArrowShots(self, points: List[List[int]]) -> int:
        n = len(points)
        if n == 0: return 0
        dp = [1] * n
        cnt = 1
        points.sort(key=lambda a:a[1])

        for i in range(n):
            for j in range(0, i):
                if points[i][0] > points[j][1]:
                    dp[i] = max(dp[i], dp[j] + 1)
                    cnt = max(cnt, dp[i])
        return cnt
		
		
		
		