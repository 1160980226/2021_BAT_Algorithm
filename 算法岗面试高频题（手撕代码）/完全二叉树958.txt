class Node(object):
	def __init__(self,val=None):
		self.val=val
		self.left=None
		self.right=None
	def isCBT(self,root):
		if not root:
			return True
		isLeaf=False
		queue=[root]
		while queue:
			node=queue.pop(0)
			if (not node.left and node.right) or (isLeaf and (node.left or node.right)):
				return False
			if node.left:
				queue.append(node.left)
			if node.right:
				queue.append(node.right)
			if not node.left and node.right:   #叶子层开始
				isLeaf=True
		return True
			
			
			
			
class Solution:
    def isCompleteTree(self, root: TreeNode) -> bool:
        """层次遍历时，叶子节点为空。一但出现空，那么后续的值都必须时空。"""
        q = [root]
        has_none = False # 是否出现过空
        while q:
            p = q.pop(0) # 出队
            if not has_none and not p: # 第一次出现空
                has_none = True
            elif has_none and p: # 空后面出现了非空
                return False
            if p: # 子节点入队列，无论是否空
                q.extend([p.left, p.right])
        return True

