class Solution:
    def isMatch(self, s: str, p: str) -> bool:
        s, p = '#'+s, '#'+p
        m, n = len(s), len(p)
        dp = [[False]*n for _ in range(m)]
        dp[0][0] = True
        
        for i in range(m):
            for j in range(1, n):
                if i == 0:
                    dp[i][j] = j > 1 and p[j] == '*' and dp[i][j-2]
                elif p[j] in [s[i], '.']:
                    dp[i][j] = dp[i-1][j-1]
                elif p[j] == '*':
                    dp[i][j] = j > 1 and dp[i][j-2] or p[j-1] in [s[i], '.'] and dp[i-1][j]
                else:
                    dp[i][j] = False
        return dp[-1][-1]


class Solution:
	def isMatch(self,s,p):
		dp=[[False]*(len(p)+1)]*(len(s)+1)
		dp[0][0]=True
		for j in range(1,len(s)+1):
			dp[j][0]=False
		m=len(s)+1
		n=len(p)+1
		for i in range(m):
			for j in range(1,n):
				if i==0:
					dp[i][j] = j>1 and p[j-1] == "*" and dp[i][j-2]
				elif p[j-1] in [s[i-1],'.']:
					dp[i][j]=dp[i-1][j-1]
				elif p[j-1] == "*":
					dp[i][j] = j>1 and dp[i][j-2] or p[j-2] in [s[i-1],'.'] and dp[i-1][j]
				else:
					dp[i][j]=False
		return dp[-1][-1]
		
		
		
		
		
class Solution:
    def isMatch(self, s: str, p: str) -> bool:
        '''
        从简单开始，仅考虑.的情况。
        if not bool(p):
            return not bool(s)
        flag_1 = bool(s) and p[0] in {s[0], '.'}
        return flag_1 and self.isMatch(s[1:], p[1:])
        在此基础上添加对*的判断
        '''
        if not bool(p):
            return not bool(s)
        flag_1 = bool(s) and p[0] in {s[0], '.'}
        if len(p) > 1 and p[1] == '*':
            # 判断下一个位置是否是*
            # 如果是，则判断下一步是p+2或者是s+1（需要额外保证当前值满足flag_1
            return flag_1 and self.isMatch(s[1:], p) or self.isMatch(s, p[2:])
        return flag_1 and self.isMatch(s[1:], p[1:])


		