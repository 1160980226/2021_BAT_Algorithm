n = 1 时，直接把盘子从 A 移到 C；
n > 1 时，
先把上面 n - 1 个盘子从 A 移到 B（子问题，递归）；
再将最大的盘子从 A 移到 C；
再将 B 上 n - 1 个盘子从 B 移到 C（子问题，递归）。

class Solution:
    def hanota(self, A: List[int], B: List[int], C: List[int]) -> None:
        """
        Do not return anything, modify C in-place instead.
        """
        n=len(A)
        self.move(n,A,B,C)

    def move(self,n,A,B,C):
        if n== 1:
            C.append(A[-1])
            A.pop()
            return 
        else:
            self.move(n-1,A,C,B)
            C.append(A[-1])
            A.pop()
            self.move(n-1,B,A,C)
			
时间复杂度：O(2^n-1)一共需要移动的次数。
空间复杂度：O(1)