[-1,-2,2,5,7,-9]
[2,5,7] 14

def maxaddarr(num):
	max_sum=float("-inf")
	cursum=num[0]
	temp = [num[0]]
	result=[]
	for i in range(1,len(num)):
		if cursum <= 0:
			cursum=num[i]
			temp = [num[i]]
		else:
			cursum+=num[i]
			temp.append(num[i])
		if cursum>max_sum:
			max_sum=cursum
			result=temp[:] #浅拷贝
	return max_sum,result
if __name__ == "__main__":
    maxaddarr([-1,3,5,-9])
	
	
	
	
*/
def maxaddarr(num):
	dp = [i for i in num]
	max_sum = num[0]
	for i in range(1,len(num)):
		dp[i] = max(dp[i-1]+num[i],num[i])
		max_sum = max(dp[i],max_sum)
	return max_sum
	
	


	
def maxaddarr(num):
	dp = [i for i in num]
	max_sum = num[0]
	res=[num[0]]
	result=[]
	for i in range(1,len(num)):
		if dp[i-1]+num[i] > num[i]:
			dp[i] = dp[i-1]+num[i]
			res.append(num[i])
		else:
			dp[i] = num[i]
			res = [num[i]]
		if max_sum < dp[i]:
			max_sum = dp[i]
			result = res[:]
	return max_sum,result
	
	




class Solution:
    def FindGreatestSumOfSubArray(self, array):
        res =len(array) and max(array)
        temp = 0
        for i in array:
            temp = max(i,temp+i)
            res = max(res,temp)
        return res