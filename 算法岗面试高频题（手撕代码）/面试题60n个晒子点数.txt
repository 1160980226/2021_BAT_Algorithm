解题思路
定义：dp[n][i]为前n个骰子和达到i的总个数
转移方程：dp[n][i]可以由{dp[n-1][i-1], dp[n-1][i-2],...,dp[n-1][i-6]}转移得来
边界条件：初始时dp[1][i] = 1,即掷一个骰子，得到数字1-6的可能总数都为1
代码


class Solution:
	def twoSum(self,n):
		dp=[[0]*(6*n+1) for _ in range(n+1)]
		for i in range(1,7):
			dp[1][i]=1
		for i in range(2,n+1):
			for j in range(i,6*i+1):
				for k in range(1,7):
					if j-k>=i-1 and j-k<=(i-1)*6:
						dp[i][j] += dp[i-1][j-k]
		ans =dp[n][n:]
		ans = list(map(lambda x: x/6**n,ans))
		return ans
		
				
		