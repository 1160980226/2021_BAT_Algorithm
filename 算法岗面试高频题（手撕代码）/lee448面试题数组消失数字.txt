class Solution:
    def findDisappearedNumbers(self, nums: List[int]) -> List[int]:
        i = 0
        while i < len(nums):
            if nums[i] != nums[nums[i]-1]:
                nums[nums[i]-1],nums[i] = nums[i] ,nums[nums[i]-1]  #有坑 nums[i],nums[nums[i]-1] = nums[nums[i]-1] ,nums[i]不行
            else:
                i += 1
        res = []
        for i in range(len(nums)):
            if i + 1 != nums[i]:
                res.append(i+1)
        return res


class Solution:
    def findDisappearedNumbers(self, nums: List[int]) -> List[int]:
        for i in range(len(nums)):
            loc=abs(nums[i])-1
            if nums[loc]>0:
                nums[loc]=-nums[loc]
        res=[]
        for i in range(len(nums)):
            if nums[i]>0:
                res.append(i+1)
        return res
        
		
		
class Solution:
    def findDisappearedNumbers(self, nums: List[int]) -> List[int]:
        s = set(nums)
        return [i for i in range(1, len(nums) + 1) if i not in s]

