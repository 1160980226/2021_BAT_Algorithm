*/c++
class Solution {
public:
	int getDepth(TreeNode* t) {
		if (t==NULL)
			return 0;
		return 1+max(getDepth(t->left),getDepth(t->right));
	}
	bool IsBalanced_Solution(TreeNode* pRoot) {
		if (pRoot==NULL)
			return true;
		if (abs(getDepth(pRoot->left)-getDepth(pRoot->right))>1)
			return false;
		return IsBalanced_Solution(pRoot->left)&&IsBalanced_Solution(pRoot->right);
	}
};

*/python
class Solution:
	def IsBalanced_Solution(self,root):
		if not root:
			return True
		if abs(self.maxDepth(root.left)-self.maxDepth(root.right)) > 1:
			return False
		return self.IsBalanced_Solution(root.left) and self.IsBalanced_Solution(root.right)
		
	def maxDepth(self,root):
		if not root:
			return 0
		return max(self.maxDepth(root.left),self.maxDepth(root.right)) + 1
		
		
		
		
		
			
	