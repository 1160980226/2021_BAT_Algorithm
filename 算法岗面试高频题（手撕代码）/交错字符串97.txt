import functools
class Solution:
    @functools.lru_cache(None)
    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:
        if len(s3) != len(s1)+len(s2):
            return False
        i=0
        j=0
        k=0
        while i<len(s1) and j<len(s2):
            if s1[i]!=s2[j]:
                if s3[k]==s1[i]:
                    k+=1
                    i+=1
                elif s3[k]==s2[j]:
                    k+=1
                    j+=1
                else:
                    return False
            elif s1[i]==s2[j]:
                if s3[k]==s1[i]:
                    return self.isInterleave(s1[i+1:],s2[j:],s3[k+1:]) or self.isInterleave(s1[i:],s2[j+1:],s3[k+1:])
                else:
                    return False
        return s3[k:] == s1[i:]+s2[j:]
		
		
class Solution:
    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:
        if len(s3) != len(s1)+len(s2):
            return False
        dp=[[False]*(len(s2)+1) for _ in range(len(s1)+1)]
        dp[0][0]=True
        for i in range(1,len(s1)+1):
            dp[i][0]=(dp[i-1][0] and s1[i-1]==s3[i-1])
        for j in range(1,len(s2)+1):
            dp[0][j]=(dp[0][j-1] and s2[j-1]==s3[j-1])
        for i in range(1,len(s1)+1):
            for j in range(1,len(s2)+1):
                dp[i][j]=(dp[i-1][j] and s1[i-1]==s3[i+j-1]) or (dp[i][j-1] and s2[j-1]==s3[i+j-1])
        return dp[-1][-1]
		
		



class Solution:
    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:
        import functools
        n1 = len(s1)
        n2 = len(s2)
        n3 = len(s3)
      #  @functools.lru_cache(None)
        def helper(i, j, k):
            if i == n1 and j == n2 and k == n3:
                return True
            if k < n3:
                if i < n1 and s1[i] == s3[k] and helper(i+1, j, k+1):
                    return True
                if j < n2 and s2[j] == s3[k] and helper(i, j+1, k+1):
                    return True
            return False
        return helper(0,0,0)
