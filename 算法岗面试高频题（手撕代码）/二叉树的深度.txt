*/c++
class Solution {
public:
	int TreeDepth(TreeNode* pRoot){
		if(!pRoot) return 0;
		return max(1+TreeDepth(pRoot->left),1+TreeDepth(pRoot->right));
	}
};


*/
class Solution {
public:
	int TreeDepth(TreeNode* pRoot) {
		if (!pRoot) return 0;
		queue<TreeNode*> que;
		que.push(pRoot);
		int depth = 0;
		while(!que.empty()) {
			int size=que.size();
			depth++;
			for(int i=0;i<size;i++) {
				TreeNode *node = que.front();
				que.pop();
				if (node->left) que.push(node->left);
				if (node->right)que.push(node->right);
			}
		}
		return depth;
	}
};

*/python
class Solution:
	def TreeDepth(self,pRoot):
		if pRoot is None:
			return 0
		queue = []
		queue.append(pRoot)
		depth = 0
		while queue:
			length = len(queue)
			depth += 1
			for i in range(length):
				node = queue.pop(0)
				if node.left:
					queue.append(node.left)
				if node.right:
					queue.append(node.right)
		return depth
*/		
class Solution:
	def TreeDepth(self,pRoot):
		if pRoot is None:
			return 0
		count = max(self.TreeDepth(pRoot.left),self.TreeDepth(pRoot.right))+1
		return count
		
		