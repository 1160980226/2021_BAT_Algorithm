*/C++解法

class Solution {
public:
    vector<int> twoSum(vector<int>& numbers, int target) {
        for( int i = 0; i <numbers.size() ; ++i) {
            int t = target - numbers[i], left = i + 1, right = numbers.size()-1;
            while(left <= right) {
                int mid = (left + right) / 2;
                if(numbers[mid] == t) return {i + 1, mid + 1};
                else if (numbers[mid] < t) left = mid + 1;
                else right = mid - 1;
            }
           
        }
        return {};
    }
};

*/

class Solution {
public:
    vector<int> twoSum(vector<int>& numbers, int target) {
        int l = 0, r = numbers.size() -1;
        while( l < r) {
            int sum = numbers[l] + numbers[r];
            if (sum == target) return {l + 1, r + 1};
            else if (sum < target) ++l;
            else --r;
        }
        return {};
    }
};


*/Python 解法
class Solution:
    def twoSum(self, numbers,target):
        if not numbers : return []
        l ,r =0, len(numbers) - 1
        while l < r:
            if numbers[l] + numbers[r] == target:
                return [l+1, r+1]
            elif numbers[l] + numbers[r] < target:
                l +=1
            else:
                r -=1
                
