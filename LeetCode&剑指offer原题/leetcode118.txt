*/c++

class Solution {
public:
	vector<vector<int>> generate(int numRows) {
		vector<vector<int>> res(numRows,vector<int>());
		for (int i = 0; i < numRows; ++i){
			res[i].resize(i+1,1);
			for(int j = 1;j < i; ++j){
				res[i][j] = res[i-1][j-1] + res[i-1][j];
			}
		}
		return res;
	}
};

*/
class Solution {
public:
	vector<vector<int>> generate(int numRows) {
		vector<int> vec = {1};
		vector<vector<int>> res;
		while(numRows-- > 0){
			res.push_back(vec);
			for(int i = vec.size()-1;i >= 1`;i--)
				vec[i] += (i-1 >= 0 ? vec[i-1]:0);
			vec.push_back(1);
		}
		return res;
	}
};


*/python
		
def generate(self,numRows):
	result = []
	for i in range(numRows):
		now = [1]*(i+1)
		if i >= 2:
			for n in range(1,i):
				now[n] = pre[n-1]+pre[n]
		result.append(now)
		pre = now
	return result
	
	
*/
def generate(self,numRows):
	result = []
	for i in range(len(numRows)):
		now = [1]*(i+1)	
		result.apppend(now)
		if i >= 2:
			j = len(now)-2
			while j >= 1:
				now[j] += now[j-1]
	return result
	
			
			
			
		
		
