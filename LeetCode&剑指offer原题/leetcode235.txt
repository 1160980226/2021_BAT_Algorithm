
*/c++
class Solution {
public:
	TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
		if(!root) return NULL;
		if (root->val > max(p->val,q->val))
			return lowestCommonAncestor(root->left,p,q);
		else if (root->val < min(p->val,q->val))
			return lowestCommonAncestor(root->right,p,q);
		else return root;
	}
};

*/
class Solution {
public:
	TreeNode* lowestCommonAncestor(TreeNode* root,TreeNode* p,TreeNode* q) {
		while(true) {
			if(root->val > max(p->val,q->val)) root = root->left;
			else if (root->val < min(p->val,q->val)) root = root->right;
			else break;
		}
		return root;
	}
};


*/python
class Solution:
	def lowestCommonAncestor(self,root,p,q):
		if p.val<root.val and q.val<root.val:
			return self.lowestCommonAncestor(root.left,p,q)
		if p.val>root.val and q.val>root.val:
			return self.lowestCommonAncestor(root.right,p,q)
		return root
		
		
		
*/
class Solution:
	def lowestCommonAncestor(self,root,p,q):
		while True:
			if root.val > max(p.val,q.val):
				root = root.left
			elif root.val < min(p.val,q.val):
				root = root.right
			else:
				return root
				
			
