*/C++解法

class Solution {
public:
    int uniquePaths(int m, int n) {
        vector<vector<int>> dp(m, vector<int>(n));
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if( i == 0 || j == 0)
                    dp[i][j] = 1;
                else
                    dp[i][j] = dp[i-1][j] + dp[i][j-1];
            }
        }
        return dp[m-1][n-1];
    }
};

*/

class Solution {
public:
    int uniquePaths(int m, int n){
        vector<int> dp(n,1);
        for (int i = 1; i < m; i++)
            for(int j = 1; j < n; j++)
                dp[j] += dp[j-1];
        return dp[n-1];
    }
};

*/Python 解法

class Solution:
    def uniquePaths(self, m: int, n: int) -> int:
        dp = [[0]*n]*m
        for i in range(0,m):
            for j in range(0,n):
                if i == 0 or j == 0:
                    dp[i][j] = 1
                else:
                    dp[i][j] = dp[i-1][j] + dp[i][j-1]
        return dp[m-1][n-1]
        
*/

class Solution:
    def uniquePaths(self, m, n):
        def factor(num):
            if num < 2:
                return 1
            res = 1
            for i in range(1, num+1):
                res *= i
            return res
        ans = factor(m+n-2) // (factor(m-1) * factor(n-1))
        return ans
        
*/

class Solution:
    def uniquePaths(self,m,n):
        f = lambda x : x*f(x-1) if x>=2 else 1 
        return f(m+n-2) // (f(m-1)*f(n-1))

 */   
 
class Solution:
    def uniquePaths(self, m ,n):
        dp = [0 for _ in range(n)]
        for i in range(m):
            for j in range(n):
                if i == 0 or j == 0:
                    dp[j] = 1
                else:
                    dp[j] = dp[j] + dp [j-1]
        return dp[-1]

        