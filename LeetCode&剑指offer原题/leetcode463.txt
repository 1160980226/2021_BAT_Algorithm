*/c++
class Solution {
public:
	int islandPerimeter(vector<vector<int>>& grid) {
		if(grid.empty() || grid[0].empty()) return 0;
		int m = grid.size(), n = grid[0].size(), res = 0;
		for(int i = 0; i < m; ++i) {
			for (int j = 0; j < n; ++j) {
				if(grid[i][j] == 0) continue;
				if(j == 0 || grid[i][j-1] == 0) ++res;
				if(i == 0 || grid[i-1][j] == 0) ++res;
				if (j == n - 1 || grid[i][j+1] == 0) ++res;
				if(i == m - 1 || grid[i+1][j] == 0) ++res;
			}
		}
		return res;
	}
};


*/
class Solution {
public:
    int islandPerimeter(vector<vector<int>>& grid) {
        if (grid.empty() || grid[0].empty()) return 0;
        int res = 0, m = grid.size(), n = grid[0].size();
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (grid[i][j] == 0) continue;
                res += 4;
                if (i > 0 && grid[i - 1][j] == 1) res -= 2;
                if (j > 0 && grid[i][j - 1] == 1) res -= 2;
            }
        }
        return res;
    }
};

*/python
class Solution:
	def islandPerimeter(self,grid):
		length = len(grid)
		width = len(grid[0])
		prm = 0
		for i in range(length):
			for j in range(width):
				if grid[i][j] == 1:
					if j == 0 or grid[i][j-1] == 0:
						prm += 1
					if i == 0 or grid[i-1][j] == 0:
						prm += 1
		return prm*2
		
	
