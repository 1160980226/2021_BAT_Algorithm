*/c++
class Solution {
public:
	bool repeatedSubstringPattern(string str) {
		int n = str.size();
		for(int i = n/2; i >= 1; --i) {
			if(n % i == 0){
				int c = n / i;
				string t ="";
				for(int j =0;j<c;++j) {
					t += str.substr(0,i);
				}
				if (t == str) return true;
			}
		}
	return false;
	
	}
};


*/KMP
class Solution {
public:
	bool repeatedSubstringPattern(string str) {
		int i = 1, j = 0, n = str.size();
		vector<int> dp(n+1,0);
		while(i < n){
			if (str[i] == str[j]) dp[++i] = ++j;
			else if (j == 0) ++i;
			else j = dp[j];
		}
		return dp[n] && (dp[n] % (n-dp[n]) == 0);
	}
};

*/python
class Solution:
	def repeatedSubstringPattern(self,s):
		return s in (s+s)[1:2*len(s)-1]
		
		
*/
class Solution:
	def repeatedSubstringPattern(self,s):
		for i in range(len(s)//2):
			if len(s) % (i+1) == 0 and s[:i+1]*(len(s)//(i+1)) == s:
				return True
		return False
		
		
*/
class Solution:
	def repeatedSubstringPattern(self,s):
		i = 1
		j = 0
		next = [0]*(len(s)+1)
		while i < len(s):
			if s[i] == s[j]:
				i+=1
				j+=1
				next[i] = j
			elif j == 0:
				i +=1
			else:
				j = next[j]
		return next[-1] && (next[-1] % (len(s)-next[-1]) == 0)
		