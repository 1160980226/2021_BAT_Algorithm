*/C++解法

class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        if (grid.empty()) return 0;
        imt m = grid.size(), n = grid[0].size();
        vector<vector<int>> dp(m, vector<int>(n));
        dp[0][0] = grid[0][0];
        for( int i = 1; i < m; ++i) dp[i][0] = grid[i][0] + dp[i-1][0];
        for(int j =1; j <m; j++) dp[0][j] = grid[0][j] + dp[0][j-1];
        for (int i =1; i <m ;i++){
            for (int j =1; j<m; j++){
                dp[i][j] = grid[i][j] + min(dp[i-1][j], dp[i][j-1]);
            
            }
        }
        return dp[m-1][n-1];
        
    }
};

*/
class Solution{
public:
    int minPathSum(vector<vector<int>>& grid) {
        if(grid.empty()) return 0;
        for (int i = 0; i < grid.size();i++){
            for (int j=0; j <grid[0].size(); j++){
                if( i ==0 && j ==0) continue;
                if(i == 0) grid[0][j] += grid[0][j-1];
                else if (j == 0) grid[i][0] += grid[i-1][0];
                else grid[i][j] += min(grid[i-1][j],grid[i][j-1]);
                
            }
        }
        return grid.back().back();
    }
};

*/C++解法
class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        if(grid.empty()) return 0;
        int  m = grid.size(), n = grid[0].size();
        vector<int> dp(n,0);
        for (int i = 0; i < m; i++){
            for (int j = 0; j < n; j++){
                if ( i == 0 && j > 0) dp[j] = dp[j-1] + grid[i[j];
                if (j == 0) dp[j] +=grid[i][j] ;
                else dp[j] = grid[i][j] + min(dp[j], dp[j-1]);
            }
        
        }
    return dp[n-1];
    }
};

*/Python解法
class Solution:
    def minPathSum(self,grid):
        m = len(grid)
        n = len(grid[0])
        for i in range(1, n):
            grid[0][i] += grid[0][i-1]
        for i in range(1,m):
            grid[i][0] += grid[i-1][0]
        for i in  range(1,m):
            for j in range(1,n):
                grid[i][j] += min(grid[i][j-1], grid[i-1][j])
        return grid[m-1][n-1]
        
