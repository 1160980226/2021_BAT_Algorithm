*/C++解法

class Solution {
public:
    vector<int> findDisappearedNumbers(vector<int>& nums) {
        vector<int> res;
        for(int i = 0; i < nums.size(); ++i){
            int idx = abs(nums[i]) - 1;
            nums[idx] = (nums[idx] > 0) ? -nums[idx] : nums[idx];
        }
        for (int i = 0; i < nums.size(); ++i){
            if (nums[i] > 0) {
                res.push_back(i+1);
            }
        }
        return res;
    }
};

*/
class Solution {
public:
    vector<int> findDisappearedNumbers(vector<int>& nums) {
        vector<int> res;
        for(int i = 0; i < nums.size(); i++) {
            if(nums[i] != nums[nums[i]-1]) {
                swap(nums[i], nums[nums[i]-1]);
                --i;
            }
        }
        for (int i = 0; i < nums.size(); ++i) {
            if(nums[i] != i + 1){
                res.push_back(i + 1);
            }
        }
        return res;
    }

};

*/Python 解法
class Solution:
    def findDisappearedNumbers(self, nums: List[int]) -> List[int]:
        i = 0
        while i < len(nums):
            if nums[i] != nums[nums[i]-1]:
                nums[nums[i]-1],nums[i] = nums[i] ,nums[nums[i]-1]
            else:
                i += 1
        res = []
        for i in range(len(nums)):
            if i + 1 != nums[i]:
                res.append(i+1)
        return res
        
        