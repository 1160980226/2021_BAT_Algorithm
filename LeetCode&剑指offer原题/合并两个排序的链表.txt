/*
struct ListNode {
	int val;
	struct ListNode *next;
	ListNode(int x) :
			val(x), next(NULL) {
	}
};*/
class Solution {
public:
    ListNode* Merge(ListNode* pHead1, ListNode* pHead2)
    {
        if (pHead1 == NULL)
            return pHead2;
        else if (pHead2 == NULL)
            return pHead1;
        ListNode* p1 = pHead1;
        ListNode* p2 = pHead2;
        ListNode* newHead = NULL;
        if (p1->val < p2->val){
            newHead=p1;
            newHead->next = Merge(p1->next,p2);
        }
        else{
            newHead=p2;
            newHead->next = Merge(p1,p2->next);
        
        }
        return newHead;
    }
};

class Solution {
public:
    ListNode* Merge(ListNode* pHead1, ListNode* pHead2){
        if (!pHead1)
            return pHead2;
        if (!pHead2)
            return pHead1;
        ListNode* Head;
        ListNode* p;
        if (pHead1->val <= pHead2->val){
            Head = pHead1;
            pHead1 = pHead1->next;
        }
        else{
            Head = pHead2;
            pHead2 = pHead2->next;
        }
        p = Head;
        while(pHead1 && pHead2){
            if (pHead1->val<=pHead2->val){
                p -> next = pHead1;
                pHead1 = pHead1->next;
                p = p->next;
            }
            else{
                p ->next = pHead2;
                pHead2 = pHead2->next;
                p = p->next;
            }
         }
        if (pHead1 == NULL)
            p->next = pHead2;
        if(pHead2 == NULL)
            p->next = pHead1;
        return Head;
        
    }

};



class Solution {
public:
    ListNode* Merge(ListNode* pHead1, ListNode* pHead2)
    {
        if (!pHead1 && !pHead2)return NULL;
        if (!pHead1)return pHead2;
        if (!pHead2)return pHead1;
        ListNode *p = new ListNode(0);
        ListNode *head = p;
        while (pHead1 && pHead2)
        {
            if (pHead1->val < pHead2->val)
            {
                head->next = pHead1;
                pHead1 = pHead1->next;
            }
            else
            {
                head->next = pHead2;
                pHead2 = pHead2->next;
            }
            head = head->next;
        }
        if (pHead1)
            head->next = pHead1;
        if (pHead2)
            head->next = pHead2;
        return p->next;
    }
};




*/Python 解法
# -*- coding:utf-8 -*-
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
class Solution:
    # 返回合并后列表
    def Merge(self, pHead1, pHead2):
        # write code here
        dummy = cur = ListNode(0)
        while pHead1 and pHead2:
            if pHead1.val < pHead2.val:
                cur.next = pHead1
                pHead1 = pHead1.next
            else:
                cur.next = pHead2
                pHead2 = pHead2.next
            cur = cur.next
        cur.next = pHead1 or pHead2
        return dummy.next
        
                
                
class Solution:
    def Merge(self,pHead1,pHead2):
        if not pHead1 or not pHead2:
            return pHead1 or pHead2
        if pHead1.val < pHead2.val:
            pHead1.next = self.Merge(pHead1.next,pHead2)
            return pHead1
        else:
            pHead2.next = self.Merge(pHead1,pHead2.next)
            return pHead2
            
            