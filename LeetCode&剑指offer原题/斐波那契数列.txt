*/C++解法
class Solution {
public:
    int Fibonacci(int n) {
        if (n<=1)
            return n;
        return Fibonacci(n-1) + Fibonacci(n-2);
    }
};




class Solution {
public:
    int Fibonacci(int n) {
        vector<int> f;
        if (n<2)
            return n;
        f.push_back(0);
        f.push_back(1);
        for (int i =2; i <= n; i++){
            f.push_back(f[i-1]+f[i-2]);
        }
        return f.back();
    }
};



class Solution {
public:
    int Fibonacci(int n) {
        int f = 0, g = 1;
        while(n--){
            g += f;
            f = g - f;
        }
    return f;
    }
};



*/
class Solution {
public:
    int Fibonacci(int n) {
        if (n==0)
            return 0;
        if (n==1)
            return 1;
        int num1 = 0, num2 = 1;
        int currentnum;
        for(int i=2; i<=n;++i){
            currentnum = num1 + num2;
            num1 = num2;
            num2 = currentnum;
        }
    return num2;
    }
};




*/Python 解法
# -*- coding:utf-8 -*-
class Solution:
    def Fibonacci(self, n):
        # write code here
        res = [0,1]
        while len(res)<=n:
            res.append(res[-1]+res[-2])
        return res[n]
        